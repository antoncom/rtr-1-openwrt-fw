<%

local util = require "luci.util"

%>

<script type="text/javascript">
//<![CDATA[
	L.require('request').then(function(request) {
		L.require('ui').then(function(ui) {
			L.require('dom').then(function(dom) {
			// 	uci.load("tsmodem").then(function(out){
					var UIPhone = ui.AbstractElement.extend({
						__init__: function(simname, options) {
			                this.phone = options.phone
			                this.email = options.email
			                this.uci_id = options.uci_id

			                this.cb_add = null
			                this.cb_save = null
			                this.cb_delete = null

			                this.tId_connection_error_add = null
			                this.tId_connection_error_save = null
			                this.tId_connection_error_delete = null
			                this.xhr_resp = ""

							var self = this

							this.chunk = {

	                            phone: new ui.TextFieldStyled(this.phone, {
	                                        optional: false,
	                                        htmlStyle: "margin-top: 7px;",
	                                        validate: this.nearleyValidator("phone", "Введите телефон в формате: +79051002010")
	                            }),

	                            email: new ui.TextFieldStyled(this.email, {
	                                        optional: true,
	                                        htmlStyle: "margin-top: 7px;",
	                                        validate: this.nearleyValidator("email", "Введите корректный имэйл адрес")
	                            }),

								btn_phone_save: E('input',  {
									type: "button", class: "cbi-button cbi-button-apply phone-save",
									["data-phone"]: this.phone,
									["data-email"]: this.email,
									["data-uci_id"]: this.uci_id,
									value: _("Сохранить"),
									style: "display: initial;",
								}),

								btn_phone_delete: E('input',  {
									type: "button", class: "cbi-button cbi-button-apply phone-delete",
									["data-phone"]: this.phone,
									["data-email"]: this.email,
									["data-uci_id"]: this.uci_id,
									value: _("Удалить"),
									style: "display: initial;",
								}),

								btn_phone_add: E('input',  {
									type: "button", class: "cbi-button cbi-button-apply phone-add",
									["data-phone"]: "",
									["data-email"]: "",
									["data-uci_id"]: "",
									value: _("Добавить"),
									style: "display: initial;",
								}),
							}


							if((this.phone && this.phone.length > 0) || (this.uci_id == "new")) {
								this.chunk.btn_phone_add.disabled = true;
								if(this.uci_id == "new") {
									this.chunk.btn_phone_delete.disabled = true;
								}
							}
							this.chunk.btn_phone_save.disabled = true;
						},

						alert: function(icon, message, confirmBtn) {
							Swal.fire({
							  position: "center-end",
							  icon: icon,	// for example: "success",
							  text: message,
							  width: "250px",
							  showConfirmButton: confirmBtn, // true or false
							  timer: 2000
							});
						},

						render: function() {
			                var container = E('div', { id: 'uci-' + this.uci_id, class: 'tr cbi-rowstyle' }, [
			                	E('div', {class: 'td', ["data-title"]: 'N'}, E('div', {}, parseInt("1"))),
			                	E('div', {class: 'td', ["data-title"]: 'Phone'}, this.chunk.phone.render()),
			                	E('div', {class: 'td', ["data-title"]: 'Email'}, this.chunk.email.render()),
			                    E('div', {class: "nowrap cbi-section-actions td", style: "text-align: right;"}, [
			                    	this.chunk.btn_phone_add,
									this.chunk.btn_phone_save,
									this.chunk.btn_phone_delete,
			                    ])
			                ])


							return this.bind(container);
						},

						// Fire events issued from UIPhone widget
						fireEvent: function(event_name, event_data) {
							var self = this
							var s = new CustomEvent(event_name, {
								detail: event_data,
								bubbles: true,
							})
							var UIPhone_name = "UIPhone_" + self.uci_id
							if(window.EventBus.busobjects[UIPhone_name]) {
								window.EventBus.busobjects[UIPhone_name].dispatchEvent(s);
							}
						},

						rejected: function(slf) {
							return function(res) {
								var self = slf
								console.log(res)
								self.alert("error", res, true)
							}
						},

						cbRequestDone_phone_email_add: function(slf) {
							return function(x) {
								var self = slf

								if (!x) {
									return;
								}

								if(self.tId_connection_error_add) {
									clearTimeout(self.tId_connection_error_add)
								}

								self.alert("success", "Телефон и Email добавлены в список разрешённых.", false)

								// удалить строку ввода и вставить на её место строку с реально записанными в UCI данными
								self.xhr_resp = JSON.parse(x.responseText)

								if (self.xhr_resp.uci_id) {

									var phone_saved_widget = new ui.Phone(self.xhr_resp.phone, {
										phone: self.xhr_resp.phone,
										email: self.xhr_resp.email,
										uci_id: self.xhr_resp.uci_id,
									});

									self.node.replaceWith(phone_saved_widget.render())
					                self.phone = self.xhr_resp.phone
					                self.email = self.xhr_resp.email
					                self.uci_id = self.xhr_resp.uci_id
								}
								var viewWrapper = document.getElementById('phones_rows');

								// Add empty row to the table in order to user is able to add new phone/email
								var phone_widget_empty = new ui.Phone("", {
									phone: "",
									email: "",
									uci_id: "new",
								});
								
								viewWrapper.appendChild(phone_widget_empty.render());

								// а также отключить кнопку "Добавить" и активировать кн. "Удалить"
								self.chunk.btn_phone_add.disabled = true;
								self.chunk.btn_phone_save.disabled = true;
								self.chunk.btn_phone_delete.disabled = false;

								request.removeInterceptor(self.cb_add)
							}

						},



						// Добавить телефон / емайл в список разрешённых
						phone_email_add: function(payload) {
							var self = this
							var xhrResponse;

							var action = "save_update_delete_phone"

							// Если процедура добавления телефона/имэйла в списке разрешёных была не удачна -
							// показать на экране пользователя уведомление об ошибке
							self.tId_connection_error_add = setTimeout(function(){
								request.removeInterceptor(self.cb_add)
								xhrResponse.then(null, self.rejected(self))
							}, 4000);


							// регистрируем callback-функцию
							self.cb_add = self.cbRequestDone_phone_email_add(self)
							request.addInterceptor(self.cb_add)

							// отправляем данные формы на роутер методом POST
							xhrResponse = request.post('<%=luci.dispatcher.build_url("admin", "system", "sms_commands", "action")%>/'+ '%h'.format(action), payload,
								{timeout: 2000}
							);
						},


						// После сохранения телефона/имэйла в списке разрешённых -
						// показать на экране пользователя уведомление
						cbRequestDone_phone_email_save: function(slf) {
							return function(x) {
								var self = slf
								if (!x) {
									return;
								}

								if(self.tId_connection_error_save) {
									clearTimeout(self.tId_connection_error_save)
								}
								self.alert("success", "Телефон и Email сохранены в списке разрешённых.", false)

								// удалить строку ввода и вставить на её место строку с реально записанными в UCI данными
								self.xhr_resp = JSON.parse(x.responseText)
								if (self.xhr_resp.uci_id) {
									var phone_updated_widget = new ui.Phone(self.xhr_resp.phone, {
										phone: self.xhr_resp.phone,
										email: self.xhr_resp.email,
										uci_id: self.xhr_resp.uci_id,
									});
									var old = document.getElementById("uci-" + self.xhr_resp["uci_id"]);
									if (old) {
										old.replaceWith(phone_updated_widget.render())

										// а также отключить кнопку "Добавить" и активировать кн. "Удалить"
										self.chunk.btn_phone_add.disabled = true;
										self.chunk.btn_phone_save.disabled = true;
										self.chunk.btn_phone_delete.disabled = false;
									}
								} else {
									console.log("DEBUG: cbRequestDone_phone_email_save: self.xhr_resp.uci_id not defined")
								}
							}

						},

						// Обновить телефон/имэйл в списке разрешённых
						// при нажатии SAVE или UPDATE в веб-интерфейсе		
						//
						phone_email_save: function(payload) {
							var self = this
							var action = "save_update_delete_phone"
							var xhrResponse;

							// Если процедура сохранениятелефона/имэйла в списке разрешёных была не удачна -
							// показать на экране пользователя уведомление об ошибке
							self.tId_connection_error_save = setTimeout(function(){
								request.removeInterceptor(self.cb_save)
								xhrResponse.then(null, self.rejected(self))
							}, 4000);


							// регистрируем callback-функцию
							self.cb_save = self.cbRequestDone_phone_email_save(self)
							request.addInterceptor(self.cb_save)

							// отправляем данные формы на роутер методом POST
							xhrResponse = request.post('<%=luci.dispatcher.build_url("admin", "system", "sms_commands", "action")%>/'+ '%h'.format(action), payload,
								{timeout: 2000}
							);
						},


						// После успешного удаления записи -
						// показать на экране пользователя уведомление
						cbRequestDone_phone_email_delete: function(slf) {
							return function(x) {
								var self = slf
								if (!x) {
									return;
								}
								self.xhr_resp = JSON.parse(x.responseText)
								if(self.tId_connection_error_delete) {
									clearTimeout(self.tId_connection_error_delete)
								}
								self.alert("success", "Телефон и Email удалены из списка разрешённых.", false)

								request.removeInterceptor(self.cb_delete)
								var raw = document.getElementById('uci-' + self.xhr_resp["uci_id"])
								if(raw) {
									raw.parentNode.removeChild(raw)
								}
							}
						},


						// Удалить телефон/имэйл из списка разрешённых
						// при нажатии DELETE в веб-интерфейсе		
						//
						phone_email_delete: function(payload) {
							var self = this

							var action = "save_update_delete_phone"
							var xhrResponse;

							// Если процедура удаления телефона/имэйла в списке разрешёных была не удачна -
							// показать на экране пользователя уведомление об ошибке
							self.cb_delete = self.cbRequestDone_phone_email_delete(self)
							self.tId_connection_error_delete = setTimeout(function(){
								request.removeInterceptor(self.cb_delete)
								self.alert("error", self.xhr_resp, true)
								xhrResponse.then(null, self.rejected(self))
							}, 3000);


							// регистрируем callback-функцию
							self.cb_delete = self.cbRequestDone_phone_email_delete(self)
							request.addInterceptor(self.cb_delete)
							// отправляем данные формы на роутер методом POST
							xhrResponse = request.post('<%=luci.dispatcher.build_url("admin", "system", "sms_commands", "action")%>/'+ '%h'.format(action), payload,
								{timeout: 1000}
							);
						},

						nearleyValidator: function(field, errormsg) {
							return function(user_input_text) {
								// this function is declared at "ui_adapter/"netping_luci_relay_adapter_http.valid.js.htm"
								var gramma = sms_send_validator(field)
								const parser = new nearley.Parser(nearley.Grammar.fromCompiled(gramma));
								try {
									var pf = parser.feed(user_input_text)
									if (pf.results.length > 0)
										return true // it's a requirement of LuCI widget API
									else
										return errormsg
								}
								catch (e) {
									return errormsg
								}
							}
						},

						cbEmailChanged: function(slf, event_type_ec) {
							return function(ev) {
								var self = slf
								var phone_empty = (self.chunk.phone.getValue() == "")
								var phone_not_valid = (self.chunk.phone.isValid() != true)
								var email_valid = ((self.chunk.email.isValid() == true) || (self.chunk.email.getValue() == ""))

								if (ev.type == event_type_ec) {
									self.chunk.btn_phone_delete.disabled = true;
									// Если телефон пуст или невалиден
									// то деактивируем все кнопки и подсвечиваем незаполненный телефон
									if(phone_empty || phone_not_valid) {
										self.chunk.btn_phone_add.disabled = true;
										self.chunk.btn_phone_save.disabled = true;
										self.chunk.phone.triggerValidation()
									// Если телефон заполнен
									// то обрабатываем заполнение Имэйла
									} else {
										// Если обновляется старая запись
										// то активируем кн. Save при условии, что Email валидный
										if(self.uci_id != "new") {
											self.chunk.btn_phone_add.disabled = true;
											if (email_valid) {
												self.chunk.btn_phone_save.disabled = false;
											} else {
												self.chunk.btn_phone_save.disabled = true;
											}
										} else {
											// Если добавляется новая запись
											// то активируем кн. Add при условии, что Email валидный
											if (email_valid) {
												self.chunk.btn_phone_add.disabled = false;												
											} else {
												self.chunk.btn_phone_add.disabled = true;
											}
										}
									}
								}
							}
						},

						cbPhoneChanged: function(slf, event_type_pv) {
							return function(ev) {
								var self = slf
								var phone_empty = (self.chunk.phone.getValue() == "")
								var phone_not_valid = (self.chunk.phone.isValid() != true)

								if(self.uci_id == "new") {
									self.chunk.btn_phone_save.disabled = true
									self.chunk.btn_phone_delete.disabled = true
									if (ev.type == event_type_pv) {
										if (phone_empty || phone_not_valid) {
											self.chunk.btn_phone_add.disabled = true
										} else {
											self.chunk.btn_phone_add.disabled = false
										}
									}
								} else {
									if (ev.type == event_type_pv) {
										if (phone_empty || phone_not_valid) {
											self.chunk.btn_phone_save.disabled = true
											self.chunk.btn_phone_delete.disabled = true
										} else {
											self.chunk.btn_phone_save.disabled = false
											self.chunk.btn_phone_delete.disabled = true
										}
									}
								}
							}
						},


						bind: function(container) {
							this.node = container
							var self = this



							// Make buttons disabled according to UI logic

							dom.bindClassInstance(container, this);


							// Register events object which will represent UISiminfo widget on the Event Bus
							window.EventBus.registerTo(this.node,"UIPhone_" + this.uci_id)

							if(this.chunk) {


								this.chunk.btn_phone_save.onclick = function(){
									let id = self.chunk.btn_phone_save.dataset["uci_id"]

									self.fireEvent("btn_phone_save", {
										phone: self.chunk.phone.getValue(),
										email: self.chunk.email.getValue(),
										uci_id: id,
										action: "save"
									})
								}

								this.chunk.btn_phone_delete.onclick = function(){
									let id = self.chunk.btn_phone_save.dataset["uci_id"]

									self.fireEvent("btn_phone_delete", {
										phone: self.phone,
										action: "delete",
										uci_id: id,
									})
								}

								this.chunk.btn_phone_add.onclick = function(){
									let id = self.chunk.btn_phone_save.dataset["uci_id"]
									self.fireEvent("btn_phone_add", {
										phone: self.chunk.phone.getValue(),
										email: self.chunk.email.getValue(),
										action: "save",
										uci_id: id,
									})
								}

								// ---------------------
								// Email change UI logic
								// ---------------------

								// If Email changed:
								// - enable Save button if adding
								// - disable Delete button
								var event_type_ec = 'email-changed-' + self.uci_id
								window.EventBus.register(this.chunk.email.node, event_type_ec, ["keyup"], self.cbEmailChanged(self, event_type_ec))

								// ---------------------
								// Phone change UI logic
								// ---------------------
								// If Phone empty or not valid:
								// - disable Save button
								// - disable Delete button
								var event_type_pv = 'phone-valid-' + self.uci_id
								window.EventBus.register(this.chunk.phone.node, event_type_pv, ["keyup"], self.cbPhoneChanged(self, event_type_pv))
							}




							// ---------------------------------------------------
							// Phone SAVE pressed on some UIPhone widget
							// ---------------------------------------------------
							if(self.uci_id == "new") {
								window.EventBus.listenToASAP("UIPhone_new", ["btn_phone_add"], function(ev) {

									var event_data = ev.detail || {}
									// Реагировать на событие SAVE только для данного экземпляра виджета
									var raw = document.getElementById('uci-new')
									if (raw && event_data["uci_id"] == "new") {
										self.phone_email_add(event_data);
									}

								})
							}

							// ---------------------------------------------------
							// Phone UPDATE pressed on some UIPhone widget
							// ---------------------------------------------------
							window.EventBus.listenToASAP("UIPhone_" + self.uci_id, ["btn_phone_save"], function(ev) {
								var event_data = ev.detail || {}

								// Реагировать на событие UPDATE только для данного экземпляра виджета
								var raw = document.getElementById('uci-' + event_data["uci_id"])
								if(raw && self.uci_id != "new") {
									self.phone_email_save(event_data);
								}

							})

							// ---------------------------------------------------
							// Phone DELETE pressed on some UIPhone widget
							// ---------------------------------------------------
							window.EventBus.listenToASAP("UIPhone_" + self.uci_id, ["btn_phone_delete"], function(ev) {
								var event_data = ev.detail || {}
								var raw = document.getElementById('uci-' + event_data["uci_id"])

								if(raw && self.uci_id != "new") {
									self.phone_email_delete(event_data);	
								}
							})

							return container;
						},

					});

					ui["Phone"] = UIPhone;
			// 	});
			});
		});
	});

//]]>
</script>
