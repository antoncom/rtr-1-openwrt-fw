
<%+tsmconsole/modal.css%>
<%+tsmconsole/utils/external.js%>

<script type="text/javascript">
//<![CDATA[
	L.require('ui').then(function(ui) {
		L.require('dom').then(function(dom) {
		// 	uci.load("tsmodem").then(function(out){
				var UIModal = ui.AbstractElement.extend({
					__init__: function() {
						console.log("UIModal INIT....")
						this.term = null;
						this.className = "webcon_term"
						this.last_at_command = ""
this.welcome = `
██████  ██ ████████  ██████  ██████  ██████  ██████
██   ██ ██    ██    ██      ██    ██ ██   ██ ██   ██
██████  ██    ██    ██      ██    ██ ██████  ██   ██
██   ██ ██    ██    ██      ██    ██ ██   ██ ██   ██
██████  ██    ██     ██████  ██████  ██   ██ ██████
`;
},

					render: function() {
                        var container = document.createElement("div");
                        container.classList.add(this.className);
                        container.innerHTML = `
                        <h4>Терминал AT-команд</h4>
                        <div class="cbi-map">
                            <div class="cbi-map-section">
                                <div class="cbi-map-section-node">
                                    <div class="cbi-value">
                                            <div id="terminal"></div>
                                    </div>

                                    <div class="cbi-value" style="margin-top: 50px; float: right;">
                                        <div class="btn popup-close">Закрыть окно</div>
                                    </div>

                                </div>
                            </div>
                        </div>
                        `;

						return this.bind(container);
					},

					bind: function(container) {
						this.node = container
						dom.bindClassInstance(container, this);
                        var self = this
						window.EventBus.registerTo(this.node,"UIModal")


                        // --------------------------------------------------------------------------------
                        // Subscribe on UISiminfo widget, btn_setting_pressed event: Open SIM Setting modal
                        // --------------------------------------------------------------------------------
                        window.EventBus.listenToASAP("UISiminfo_0", ["btn_console_pressed"], function(ev) {
                            var event_data = ev.detail || {}
                            self.simid = event_data.simid || self.simid || "simid-0"

                            self.openModal()

                        })

                        window.EventBus.listenToASAP("UISiminfo_1", ["btn_console_pressed"], function(ev) {
                            var event_data = ev.detail || {}
                            self.simid = event_data.simid || self.simid || "simid-1"

                            self.openModal()

                        })

						// -----------------------------------------------------------
						// Subscribe to UIWebSocket
						// -----------------------------------------------------------
						window.EventBus.listenToASAP("websocket", ["tsmconsole"], function(ev) {
							if (ev["detail"]) {
								var data = ev["detail"]
								if (data["AT_answer"]) {
									// Проверить, если возврат от АТ-команды оканчивается символом Ctrl-Z (\u001a)
									// значит это было отправленное СМС-сообщение и не нужно его выводить повторно в терминал
									let mlen = data["AT_answer"].length
									if(data["AT_answer"].substring(mlen-1) != "\u001a") {
										self.term.echo(data["AT_answer"].replace("\r\nOK\r\n", "OK\r\n"));
									}
								}
							}
							//self.term.resume();
						})

						return container;
					},

                    stop_modem_automation: function() {
						var self = this
                    	L.require("rpc").then(function(rpc){
                    		var rpc_sess = rpc.getSessionID()
							self.fireEvent("send-to-websocket", {
								driver_command: "driver-stop-automation",
								ubus_rpc_session: rpc_sess
							});
                    	})
                    },

                    start_modem_automation: function() {
						var self = this
                    	var rpc_sess = "";
                    	L.require("rpc").then(function(rpc){
                    		rpc_sess = rpc.getSessionID()
							self.fireEvent("send-to-websocket", {
								driver_command: "driver-start-automation",
								ubus_rpc_session: rpc_sess
							});
                    	})
                    },

                    at_validate: function(comm) {
    					if(comm.substring(0,2) == "AT" || comm.substring(0,2) == "at" || this.last_at_command.indexOf("AT+CMGS=") > -1) {
    						this.last_at_command = comm
    						return { noerror: true, msg: `` }
    					} else if(comm.substring(0,4) == "help") {
    						return { noerror: true, msg: `` }
    					} else if(comm.substring(0,2) == "АТ" || comm.substring(0,2) == "ат") {
    						return { noerror: false, msg: `[[;red;]Команда должна вводиться латиницей.` }
    					} else {
    						return { noerror: false, msg: `[[;red;]Команда должна начинаться с АТ или АТ+, либо "help" для справки.` }
    					}
    				},

                    close: function () {
                        $(this.el).remove();
                        $('body').removeClass('modal-overlay-active');
                        this.start_modem_automation()
                    },

					fireEvent: function(event_name, event_data) {
						var s = new CustomEvent(event_name, {
							detail: event_data,
							bubbles: true,
						})
						window.EventBus.busobjects["UIModal"].dispatchEvent(s);
					},

                    openModal: function() {
                        // Stop modem automation first
						var self = this
                        this.stop_modem_automation()

                        L.require("ui").then(function(ui){
                            L.showModal(_('Консоль АТ-команд модема'), [
                                E('div', { class: 'cbi-map' }, [
                                    E('div', { class: 'cbi-map-section' }, [
                                        E('div', { class: 'cbi-map-section-node' }, [
                                            E('div', { class: 'cbi-value' }, [
                                                E('div', { id: 'terminal' }, "")
                                            ]),
                                        ])
                                    ])
                                ]),

                                E('div', { class: 'cbi-value-field', style: "max-width: none; margin: 0px;" }, [
                                    E('div', {
										style: "float: right;",
                                        class: 'btn',
                                        click: function() {
                                            // Start modem automation again
                                            self.start_modem_automation()
                                            L.hideModal()
                                            $(".modal").empty()
                                        }
                                    }, _('Close')),
                                ])
                            ]);

							$.terminal.defaults.allowedAttributes.push('style');
							$('#terminal').terminal(function(command, term) {
								self.term = term

								term.pause();
								var at_check = self.at_validate(command);
								if (at_check["noerror"] && command == "help")  {
									term.echo(at_check["msg"], {raw: true});
									term.echo(` <dl class="attrs">
													<dt>AT</dt><dd>Проверка отклика модема: OK или ERROR.</dd>
													<dt>ATI</dt><dd>Узнать IMEI и другую информацию производителя модема.</dd>
													<dt>ATD</dt><dd>Позвонить с модема на произвольный номер.</dd>
													<dt>AT+CREG?</dt><dd>Статус регистрации СИМ-карты в сети: 0..5.</dd>
													<dt>AT+CSQ</dt><dd>Уровень сигнала и уровень помех (подробнее: AT+CSQ help)</dd>
													<dt>AT+CUSD=1,#100#,15</dt><dd>Запрос баланса Мегафон, МТС (подробнее: AT+CUSD help)</dd>
													<dt>AT+COPS?</dt><dd>Узнать идентификатор GSM-оператора для текущего соединения</dd>
													<dt>AT+CNSMOD?</dt><dd>Узнать тип соединения: 2G/3G/4G и т.п.</dd>
													<dt>AT+CMGF=0</dt><dd>Перевести модем в режим PDU (для отправки SMS)</dd>
													<dt>AT+CMGS=N</dt><dd>Отправить SMS длиной N (в формате PDU). После выполнения необходимо сразу ввести PDU-строку сообщения.</dd>
													<dt>------------------</dt><dd>-----------------------------------------------------------</dd>
													<dt>&lt;TAB&gt;</dt><dd>Клавиша &lt;TAB&gt; - для автодополнения команды.<br />Двойной &lt;TAB&gt; покажет список вариантов.</dd>
													<dt>&lt;команда&gt; help</dt><dd>Выводит описание значений AT-команды, например введите: "AT+CSQ help"</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "ATI help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>Узнать IMEI и другую информацию производителя модема:</caption>
															<tr><th>Характеристика</th><th>Пример значений</th></tr>
															<tr><td>Manufacturer</td><td>INCORPORATED</td></tr>
															<tr><td>Model</td><td>A7600E-HNVW</td></tr>
															<tr><td>Revision</td><td>A7600M7_V3.9</td></tr>
															<tr><td>IMEI</td><td>Введите команду ATI чтобы узнать IMEI данного модема</td></tr>
															<tr><td>+GCAP</td><td>+CGSM,+FCLASS,+DS</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "ATD help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>Позвонить с модема на произвольный номер:</caption>
															<tr><th>Пример команды</th></tr>
															<tr><td>ATD+79677593231;</td></tr>
															<tr><td>где +7(967)759-32-31 - номер абонента</td></tr>
															<tr><td>ВАЖНО: команда должна оканчиваться точкой с запятой: ";"</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "AT+CREG? help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>AT+CREG? - Статус регистрации СИМ-карты в сети:</caption>
															<tr><th>Код</th><th>Значение</th></tr>
															<tr><td>0</td><td>Нет регистрации в сети</td></tr>
															<tr><td>1</td><td>Соединение установлено</td></tr>
															<tr><td>2</td><td>Поиск базовой станции</td></tr>
															<tr><td>3</td><td>В регистрации отказано</td></tr>
															<tr><td>4</td><td>Статус регистрации неизвестен</td></tr>
															<tr><td>5</td><td>Соединение установлено в режиме Роуминг"</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "AT+CSQ help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>AT+CSQ - Уровень сигнала от базовой станции и уровень помех:</caption>
															<tr><th>Пример</th><th>Значение</th></tr>
															<tr><td>+CSQ: 22,0</td><td>Уровень сигнала базовой станции: 22. Уровень помех: 0.</td></tr>
															<tr><td>+CSQ: 16,99</td><td>Уровень сигнала базовой станции: 16. Уровень помех: неопределён.</td></tr>
															<tr><td>+CSQ: 99,99</td><td>Уровень сигнала базовой станции: неопределён. Уровень помех: неопределён.</td></tr>
															<tr><td colspan="2" style="color: white;">Примечания</td></tr>
															<tr><td colspan="2">Уровень сигнала - число в диапазоне 0..31<br />
															Уровень помех - число в диапазоне 0..4
															</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "AT+CUSD help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>AT+CUSD - USSD-команда - запрос к GSM-оператору</caption>
															<tr><th>Команда</th><th>Значение</th></tr>
															<tr><td>#100#</td><td>Запросить баланс на СИМ-карте MegaFon, MTS, Yota</td></tr>
															<tr><td>#102#</td><td>Запросить баланс на СИМ-карте Beeline</td></tr>
															<tr><td>#105#</td><td>Запросить баланс на СИМ-карте Tele2</td></tr>
															<tr><td colspan="2" style="color: white;">Примечания</td></tr>
															<tr><td colspan="2">USSD-команда помещается в строке AT-команды, например:<br />
															AT+CUSD=1,#102#,15 (используйте клавишу TAB для автозаполнения)
															</td></tr>
															<tr><td colspan="2">Часто провайдер отменяет USSD-сессию (вместо баланса, приходит ответ вида "+CUSD: 2").<br />
															В таком случае запрос баланса может стать доступным через какое-то время.</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "AT+COPS? help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>AT+COPS? - Идентифицировать GSM-оператора для текущего соединения:</caption>
															<tr><th>Код</th><th>GSM-оператор</th></tr>
															<tr><td>25099</td><td>Beeline</td></tr>
															<tr><td>25001</td><td>MTS</td></tr>
															<tr><td>25002</td><td>MegaFon</td></tr>
															<tr><td>25020</td><td>Tele2</td></tr>
															<tr><td>25011</td><td>Yota</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								else if (at_check["noerror"] && command == "AT+CNSMOD? help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>AT+CNSMOD? - Узнать тип соединения: 2G/3G/4G и т.п.</caption>
															<tr><th>Код</th><th>Значение</th></tr>
															<tr><td>0</td><td>no service</td></tr>
															<tr><td>1</td><td>GSM | 2G</td></tr>
															<tr><td>2</td><td>GPRS | 2G</td></tr>
															<tr><td>3</td><td>EDGE | 2G</td></tr>
															<tr><td>4</td><td>WCDMA | 3G</td></tr>
															<tr><td>5</td><td>HSDPA | 3G</td></tr>
															<tr><td>6</td><td>HSUPA | 3G</td></tr>
															<tr><td>7</td><td>HSPA | 3G</td></tr>
															<tr><td>8</td><td>LTE | 4G</td></tr>
															<tr><td>9</td><td>TDS-CDMA | 3G</td></tr>
															<tr><td>10</td><td>TDS-HSDPA | 3G</td></tr>
															<tr><td>11</td><td>TDS-HSUPA | 3G</td></tr>
															<tr><td>12</td><td>TDS-HSPA | 3G</td></tr>
															<tr><td>13</td><td>CDMA | 3G</td></tr>
															<tr><td>14</td><td>EVDO | 3G</td></tr>
															<tr><td>15</td><td>HYBRID (CDMA and EVDO) | 3G</td></tr>
															<tr><td>16</td><td>1XLTE | 3G</td></tr>
															<tr><td>23</td><td>Ehrpd | 3G</td></tr>
															<tr><td>24</td><td>HYBRID (CDMA and Ehrpd) | 3G</td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									term.resume();
								}
								// else if (at_check["noerror"] && command.indexOf("AT+CMGS=") > -1)  {
								// 	console.log(":::", command)
								// 	term.resume();
								// }
								else if (at_check["noerror"] && command.substring(command.length-4) == "help")  {
									term.echo(` <dl class="attrs">
														<table class="bordered">
															<caption>В справочнике ещё нет информации по данной команде:</caption>
															<tr><td class="no-info"></td></tr>
														</table>
													</dd>
												</dl>`, {raw: true});
									$(".no-info").text(command.substring(0, command.length-5))
									term.resume();
								}
								else if (at_check["noerror"] == false && at_check["msg"].length > 0) {
									term.echo(at_check["msg"]);
									term.resume();
								}
								else if (at_check["noerror"] && at_check["msg"].length == 0) {
									self.fireEvent("send-at-command", { ["command"]: command })
									term.resume();
								} else {
									term.resume();
								}
							},
							{
								height: 400,
								greetings: self.welcome + 'Терминал доступа к модему по протоколу АТ\r\n',
								prompt: "[[b;#ffffff;]&gt;] ",
								tabcompletion: true,
								completion: ['ATI', 'ATD+','AT+CREG?', 'AT+CSQ', 'AT+CUSD=1,#100#,15', 'AT+CUSD=1,#102#,15', 'AT+COPS?', 'AT+CNSMOD?', 'AT+CMGF=0']
							});


                        })
                    },

				});

				ui["Modal"] = UIModal;
		// 	});
		});
	});

//]]>
</script>
