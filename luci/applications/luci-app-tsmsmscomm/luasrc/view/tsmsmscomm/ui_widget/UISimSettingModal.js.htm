
<%
	local config = "tsmodem"
	local adapter_config = "tsmodem_adapter_provider"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local log = require "tsmodem.util.log"

%>
<%
	local adapter_list = require "luci.model.tsmodem.adapter_list"

	local a = adapter_list["tsmodem_adapter_provider"]
	
	local name, dropdown = '', {}
	local adapter = adapter_list["tsmodem_adapter_provider"]

	local cssf = adapter():render("cssfile")
	local valdt = adapter():render("validator")
	local widgt = adapter():render("widgetfile")

	local adapters = uci:get_all(adapter_config)

	local adapters_html = util.serialize_json(adapters)
	local proto_list = util.serialize_json(adapter():list())


%>
<%=cssf %>
<%=valdt %>
<%=widgt %>

<%+tsmodem/ui_widget/UIAdapterEmpty.js%>
<%+tsmodem/ui_override/DropdownProto.js%>

<script type="text/javascript">
//<![CDATA[
	L.require('ui').then(function(ui) {
		L.require('dom').then(function(dom) {
		// 	uci.load("tsmodem").then(function(out){
				var UISimSettingModal = ui.AbstractElement.extend({
					__init__: function(simname, options) {
                        this.simid = options.simid
						var self = this
						L.require("uci").then(function(uci) {
							uci.load("tsmodem").then(function(out){
								self.signal_min = uci.get("tsmodem", "sim_" + self.simid, "signal_min")
								self.signal_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_signal")

								self.netreg_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_reg")
								self.balance_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_bal")
								self.ping_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_ping")

								self.sim_absent_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_sim_absent")
								self.link_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_link")

								self.autodetection_mode = uci.get("tsmodem", "sim_" + self.simid, "autodetect_provider")


							});
						});

					},

					render: function() {
		                var container = E('div')

						return this.bind(container);
					},

					bind: function(container) {
						this.node = container
						dom.bindClassInstance(container, this);
                        var self = this

						window.EventBus.registerTo(this.node,"UISimSettingModal")


                        // --------------------------------------------------------------------------------
                        // Subscribe on UISiminfo widget, btn_setting_pressed event: Open SIM Setting modal
                        // --------------------------------------------------------------------------------
                        window.EventBus.listenToASAP("UISiminfo_0", ["btn_setting_pressed"], function(ev) {
                            var event_data = ev.detail || {}
                            self.simid = event_data.simid || self.simid || "simid-0"

                            self.openModal()

                        })

						window.EventBus.listenToASAP("UISiminfo_1", ["btn_setting_pressed"], function(ev) {
                            var event_data = ev.detail || {}
                            self.simid = event_data.simid || self.simid || "simid-1"

                            self.openModal()

                        })

						return container;
					},

					fireEvent: function(event_name, event_data) {
						var s = new CustomEvent(event_name, {
							detail: event_data,
							bubbles: true,
						})
						window.EventBus.busobjects["UISimSettingModal"].dispatchEvent(s);
					},



					stop_modem_automation: function() {
						var self = this
						L.require("rpc").then(function(rpc){
							var rpc_sess = rpc.getSessionID()
							self.fireEvent("send-to-websocket", {
								driver_command: "driver-stop-automation",
								ubus_rpc_session: rpc_sess
							});
						})
					},

					start_modem_automation: function() {
						var self = this
						var rpc_sess = "";
						L.require("rpc").then(function(rpc){
							rpc_sess = rpc.getSessionID()
							self.fireEvent("send-to-websocket", {
								driver_command: "driver-start-automation",
								ubus_rpc_session: rpc_sess
							});
						})
					},

                    openModal: function() {
                        var globals_data = {}
                        var simid = this.simid
						var self = this

                        // Stop modem automation first
                        //window.socket.send('driver-stop-automation');
                        this.stop_modem_automation()

                        L.require("ui").then(function(ui){
                            L.require("uci").then(function(uci) {
                                uci.load("<%=config%>").then(function(out){
                                    var sim_data = uci.get("<%=config%>", "sim_" + simid);
                                    //var	adapter_data = uci.get("<%=adapter_config%>", sim_data["provider"]);
                                    var	adapter_data = {}
                                    var adapters = <%=adapters_html %>
                                    if(adapters["template"]) {
                                        delete adapters["template"];
                                    }

                                    var	adapter_widgets = [];

									// Set proto drodown to AUTO if autodetect_provider set is 1 (see /etc/tsmodem)
									if(sim_data["autodetect_provider"] == "1") {
										sim_data["provider"] = "00000"
									}
                                    var proto = new ui.DropdownProto(sim_data["provider"], <%=proto_list %>, {
                                        disabled: false,
                                        sort: true,
                                        optional: false
                                    });


                                    var rssi = new ui.Textfield(sim_data["signal_min"], {
                                        datatype: "rangelength(1,2)",
                                        optional: false
                                    });


                                    var balance_min = new ui.Textfield(sim_data["balance_min"], {
                                        datatype: "rangelength(1,4)",
                                        optional: false
                                    });

                                    var timeout_reg = new ui.Textfield(sim_data["timeout_reg"], {
                                        datatype: "rangelength(1,4)",
                                        optional: false,
										validate: function(inp) {
											if (inp >= 60) {
												return true;
											} else {
												return "60 sec. minimum!"
											}
										}
                                    });

                                    var timeout_signal = new ui.Textfield(sim_data["timeout_signal"], {
                                        datatype: "rangelength(1,4)",
                                        optional: false,
										validate: function(inp) {
											if (inp >= 60) {
												return true;
											} else {
												return "60 sec. minimum!"
											}
										}
                                    });

                                    var timeout_bal = new ui.Textfield(sim_data["timeout_bal"], {
                                        datatype: "rangelength(1,4)",
                                        optional: false,
										validate: function(inp) {
											if (inp >= 60) {
												return true;
											} else {
												return "60 sec. minimum!"
											}
										}
                                    });

									var timeout_ping = new ui.Textfield(sim_data["timeout_ping"], {
										datatype: "rangelength(1,4)",
										optional: false,
										validate: function(inp) {
											if (inp >= 60) {
												return true;
											} else {
												return "60 sec. minimum!"
											}
										}
									});

									var timeout_sim_absent = new ui.Textfield(sim_data["timeout_sim_absent"], {
										datatype: "rangelength(1,4)",
										optional: false,
										validate: function(inp) {
											if (inp >= 60) {
												return true;
											} else {
												return "60 sec. minimum!"
											}
										}
									});

									var timeout_link = new ui.Textfield(sim_data["timeout_link"], {
										datatype: "rangelength(1,4)",
										optional: false,
										validate: function(inp) {
											if (inp >= 60) {
												return true;
											} else {
												return "60 sec. minimum!"
											}
										}
									});


                                    // ADAPTER INITS
                                    <%
                                        for adptype, adapter in pairs(adapter_list) do
                                        	local jsnt = adapter():render("jsinit") .. "\n"
                                    %>
                                    	<%=jsnt %>
                                    <%
                                        end
                                    %>


                                    var memo = new ui.Textfield(sim_data["name"],{});
                                        //datatype: "rangelength(3,128)" });
										// Note: we allow empty memo

                                    var emptyProto = new ui.AdapterEmpty()


                                    L.showModal(_('<%:SIM card settings %>'), [
                                        E('div', { class: 'cbi-map' }, [
                                            E('div', { class: 'cbi-map-section' }, [
                                                E('div', { class: 'cbi-map-section-node' }, [
                                                    E('div', { class: 'cbi-value' }, [
                                                        E('label', { 'class': 'cbi-value-title memo-edit' }, _('<%:Memo %>') + ":"),
                                                        E('div', { class: 'cbi-value-field memo-edit' }, [
                                                            memo.render()
                                                        ])
                                                    ]),

                                                    E('div', { class: 'cbi-value' }, [
                                                        E('label', { 'class': 'cbi-value-title' }, _('<%:Signal strength, MIN, % %>') + ":"),
                                                        E('div', { class: 'cbi-value-field' }, [rssi.render()])
                                                    ]),
                                                    E('div', { class: 'cbi-value' }, [
                                                        E('label', { 'class': 'cbi-value-title' }, _('<%:Balance MIN, rub. %>') + ":"),
                                                        E('div', { class: 'cbi-value-field' }, [balance_min.render()])
                                                    ]),

                                                    E('div', { class: 'cbi-value' }, [
                                                        E('label', { 'class': 'cbi-value-title' }, _('<%:GSM-network %>') + ":"),
                                                        E('div', { class: 'cbi-value-field' }, [
                                                            E('div', { class: 'cbi-value-field-flex'}, [
                                                                E('div', { class: 'cbi-value-field-1col'}, [
                                                                    proto.render()

                                                                ]),
                                                                E('div', { class: 'cbi-value-field-2col'}, [
                                                                    // ADAPTER WIDGETS RENDER
                                                                    emptyProto.render(),
                                                                    <%
								                                        for adptype, adapter in pairs(adapter_list) do
								                                        	local jsrnd = adapter():render("jsrender") .. ",\n"
								                                    %>
								                                    	<%=jsrnd %>
								                                    <%
								                                        end
								                                    %>

                                                                    E('div', { class: 'table modal-section-param more-params'}, [
                                                                        E('div', {class: 'tr cbi-rowstyle-0'}, [
                                                                            E('div', {class: 'td', style: "width: 100%;"}, _('Timeout - GSM: нет сети')),
                                                                            E('div', {class: 'td', style: "text-align: right;"}, [timeout_reg.render()])
                                                                        ]),
                                                                        E('div', {class: 'tr cbi-rowstyle-1'}, [
                                                                            E('div', {class: 'td', style: "width: 100%;"}, _('Timeout - СИГНАЛ: слабый')),
                                                                            E('div', {class: 'td', style: "text-align: right;"}, [timeout_signal.render()])
                                                                        ]),
                                                                        E('div', {class: 'tr cbi-rowstyle-0'}, [
                                                                            E('div', {class: 'td', style: "width: 100%;"}, _('Timeout - БАЛАНС: ниже минимума')),
                                                                            E('div', {class: 'td', style: "text-align: right;"}, [timeout_bal.render()])
                                                                        ]),
																		E('div', {class: 'tr cbi-rowstyle-0'}, [
																			E('div', {class: 'td', style: "width: 100%;"}, _('Timeout - SIM: отсутствует в слоте')),
																			E('div', {class: 'td', style: "text-align: right;"}, [timeout_sim_absent.render()])
																		]),
																		E('div', {class: 'tr cbi-rowstyle-0'}, [
																			E('div', {class: 'td', style: "width: 100%;"}, _('Timeout - LINK: без доступа в интернет')),
																			E('div', {class: 'td', style: "text-align: right;"}, [timeout_link.render()])
																		]),
																		E('div', {class: 'tr cbi-rowstyle-0'}, [
																			E('div', {class: 'td', style: "width: 100%;"}, _('Timeout - PING: интернет ресурсы недоступны')),
																			E('div', {class: 'td', style: "text-align: right;"}, [timeout_ping.render()])
																		]),

                                                                    ]),
                                                                    E('button', {
                                                                        'class': 'cbi-button cbi-button-apply',
                                                                        'data-action': 'show',
                                                                        'style': 'display: initial;',
                                                                        'click': ui.createHandlerFn(this, 'toggle_more')
                                                                    }, _('More settings') )
                                                                ])
                                                            ])
                                                        ])
                                                    ]),
                                                ])
                                            ])
                                        ]),

                                        E('div', { class: 'cbi-value-field' }, [
                                            E('div', {
                                                class: 'btn',
                                                click: function() {
                                                    // Start modem automation again
                                                    //window.socket.send('driver-run-automation');
                                                    self.start_modem_automation()
                                                    L.hideModal()
                                                    $(".modal").empty()
                                                }
                                            }, _('Close')),
                                            ' ',

                                            E('div', { class: 'btn success', "name": "apply",
                                                'click': ui.createHandlerFn(this, function() {
                                                    // We load all adapters' data, but only selected protocol data will pass the validation
                                                    <%
                                                    	local getvls = string.format('adapter_data[sim_data["provider"]] = %s', adapter():render("getvalues"))
                                                        
                                                        local getflds = string.format('adapter_widgets["tsmodem_adapter_provider"] = %s', adapter():render("getfields"))
                                                    %>

                                                    	<%=getvls %>
                                                    	<%=getflds %>

                                                    var widget_list = []


                                                    var widget_list = [rssi, timeout_signal, timeout_bal, timeout_reg, balance_min, timeout_ping, timeout_link, timeout_sim_absent, memo];
                                                    if(adapters[sim_data["provider"]] != undefined) {
                                                        widget_list = widget_list.concat(tsmodem_adapter_provider.getFields())
                                                    }

                                                    var form_valid = true;
                                                    for(var w of widget_list) {
                                                        w.triggerValidation()
                                                        if(!w.isValid()) {
                                                            form_valid = false
                                                            break;
                                                        }
                                                    }

                                                    if (form_valid) {

                                                        sim_data["name"] = memo.getValue()
                                                        sim_data["proto"] = proto.getValue()

                                                        sim_data["signal_min"] = rssi.getValue()
                                                        sim_data["balance_min"] = balance_min.getValue()

                                                        sim_data["timeout_reg"] = timeout_reg.getValue()
                                                        sim_data["timeout_signal"] = timeout_signal.getValue()
                                                        sim_data["timeout_bal"] = timeout_bal.getValue()

														sim_data["timeout_ping"] = timeout_ping.getValue()
														sim_data["timeout_link"] = timeout_link.getValue()
														sim_data["timeout_sim_absent"] = timeout_sim_absent.getValue()

														// Code of provider for AUTO is 00000 (see /etc/config/tsmodem)
														sim_data["autodetect_provider"] = (proto.getValue() == "00000") ? 1 : 0;

														var a_adapter_data = {}
														a_adapter_data = Object.assign(a_adapter_data, {
															[proto.getValue()]: adapter_data[sim_data["provider"]]
														})

                                                        sim_data["provider"] = proto.getValue()

                                                        my_handleEdit(simid, sim_data, a_adapter_data);

                                                        // Start modem automation again
                                                        //window.socket.send('driver-run-automation');
                                                        self.start_modem_automation()

                                                        L.hideModal()
                                                        // Clear modal content
                                                        $(".modal").empty()

                                                        return true;

                                                    }
                                                    else {

                                                    }

                                                })
                                            }, _('Save'))

                                        ])
                                    ]);
                                })
                            })
                        })
                    },

				});

				ui["SimSettingModal"] = UISimSettingModal;
		// 	});
		});
	});

//]]>
</script>
